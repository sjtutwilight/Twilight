// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package models

import (
	"fmt"
	"io"
	"strconv"
)

type Account struct {
	ID                     string                    `json:"id"`
	Entity                 *string                   `json:"entity,omitempty"`
	Labels                 []string                  `json:"labels"`
	ChainName              string                    `json:"chainName"`
	Address                string                    `json:"address"`
	EthBalance             float64                   `json:"ethBalance"`
	Erc20Balances          []*ERC20Balance           `json:"erc20Balances"`
	DefiPositions          []*DefiPosition           `json:"defiPositions"`
	AccountTransferEvents  []*AccountTransferEvent   `json:"accountTransferEvents"`
	AccountTransferHistory []*AccountTransferHistory `json:"accountTransferHistory"`
}

type AccountTransferEvent struct {
	AccountID      string  `json:"accountId"`
	BlockTimestamp string  `json:"blockTimestamp"`
	FromAddress    string  `json:"fromAddress"`
	BuyOrSell      string  `json:"buyOrSell"`
	ToAddress      string  `json:"toAddress"`
	TokenSymbol    string  `json:"tokenSymbol"`
	ValueUsd       float64 `json:"valueUSD"`
}

type AccountTransferHistory struct {
	EndTime       string  `json:"endTime"`
	BuyOrSell     string  `json:"buyOrSell"`
	TxCnt         int     `json:"txCnt"`
	TotalValueUsd float64 `json:"totalValueUSD"`
}

type DefiPosition struct {
	Protocol        string  `json:"protocol"`
	ContractAddress string  `json:"contractAddress"`
	Position        string  `json:"position"`
	ValueUsd        float64 `json:"valueUSD"`
}

type ERC20Balance struct {
	TokenAddress string  `json:"tokenAddress"`
	TokenSymbol  string  `json:"tokenSymbol"`
	Balance      float64 `json:"balance"`
	Price        float64 `json:"price"`
	ValueUsd     float64 `json:"valueUSD"`
}

type Query struct {
}

type Token struct {
	ID           string       `json:"id"`
	ChainName    string       `json:"chainName"`
	TokenSymbol  string       `json:"tokenSymbol"`
	TokenAddress string       `json:"tokenAddress"`
	TokenDetail  *TokenDetail `json:"tokenDetail,omitempty"`
}

type TokenDetail struct {
	ID                  string                `json:"id"`
	ChainName           string                `json:"chainName"`
	TokenSymbol         string                `json:"tokenSymbol"`
	Price               float64               `json:"price"`
	Mcap                float64               `json:"mcap"`
	Liquidity           float64               `json:"liquidity"`
	Fdv                 float64               `json:"fdv"`
	Issuer              string                `json:"issuer"`
	TokenAge            string                `json:"tokenAge"`
	TokenCatagory       string                `json:"tokenCatagory"`
	SecurityScore       float64               `json:"securityScore"`
	RecentMetrics       *TokenRecentMetric    `json:"recentMetrics"`
	RollingMetrics      []*TokenRollingMetric `json:"rollingMetrics"`
	TokenTransferEvents []*TokenTransferEvent `json:"tokenTransferEvents"`
	TokenHolders        []*TokenHolder        `json:"tokenHolders"`
}

type TokenHolder struct {
	AccountID    string  `json:"accountId"`
	TokenID      string  `json:"tokenId"`
	TokenAddress string  `json:"tokenAddress"`
	Ownership    float64 `json:"ownership"`
	ValueUsd     float64 `json:"valueUSD"`
}

type TokenRecentMetric struct {
	TimeWindow        TimeWindow `json:"timeWindow"`
	Txcnt             int        `json:"txcnt"`
	Volume            float64    `json:"volume"`
	PriceChange       float64    `json:"priceChange"`
	Buys              int        `json:"buys"`
	Sells             int        `json:"sells"`
	BuyVolume         float64    `json:"buyVolume"`
	SellVolume        float64    `json:"sellVolume"`
	FreshWalletInflow float64    `json:"freshWalletInflow"`
	SmartMoneyInflow  float64    `json:"smartMoneyInflow"`
	SmartMoneyOutflow float64    `json:"smartMoneyOutflow"`
	ExchangeInflow    float64    `json:"exchangeInflow"`
	ExchangeOutflow   float64    `json:"exchangeOutflow"`
	BuyPressure       float64    `json:"buyPressure"`
}

type TokenRollingMetric struct {
	EndTime string  `json:"endTime"`
	Price   float64 `json:"price"`
	Mcap    float64 `json:"mcap"`
}

type TokenTransferEvent struct {
	TokenID        string  `json:"tokenId"`
	FromAddress    string  `json:"fromAddress"`
	ToAddress      string  `json:"toAddress"`
	ValueUsd       float64 `json:"valueUSD"`
	BlockTimestamp string  `json:"blockTimestamp"`
}

type TimeWindow string

const (
	TimeWindowTwentySeconds TimeWindow = "TWENTY_SECONDS"
	TimeWindowOneMinute     TimeWindow = "ONE_MINUTE"
	TimeWindowFiveMinutes   TimeWindow = "FIVE_MINUTES"
	TimeWindowOneHour       TimeWindow = "ONE_HOUR"
)

var AllTimeWindow = []TimeWindow{
	TimeWindowTwentySeconds,
	TimeWindowOneMinute,
	TimeWindowFiveMinutes,
	TimeWindowOneHour,
}

func (e TimeWindow) IsValid() bool {
	switch e {
	case TimeWindowTwentySeconds, TimeWindowOneMinute, TimeWindowFiveMinutes, TimeWindowOneHour:
		return true
	}
	return false
}

func (e TimeWindow) String() string {
	return string(e)
}

func (e *TimeWindow) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TimeWindow(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TimeWindow", str)
	}
	return nil
}

func (e TimeWindow) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
