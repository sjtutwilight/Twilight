version: '3.8'

services:
  jobmanager:
    image: flink:1.14.4-java11
    ports:
      - "8081:8081"
    command: jobmanager
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: jobmanager
        state.backend: filesystem
        state.checkpoints.dir: file:///flink-checkpoints
    volumes:
      - ./flink-checkpoints:/flink-checkpoints
      - ./aggregator/target:/opt/flink/jobs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/overview"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  taskmanager:
    image: flink:1.14.4-java11
    depends_on:
      - jobmanager
    command: taskmanager
    scale: 1
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: jobmanager
        taskmanager.numberOfTaskSlots: 2
        state.backend: filesystem
        state.checkpoints.dir: file:///flink-checkpoints
    volumes:
      - ./flink-checkpoints:/flink-checkpoints
      - ./aggregator/target:/opt/flink/jobs

  job-deployer:
    image: flink:1.14.4-java11
    depends_on:
      jobmanager:
        condition: service_healthy
      kafka:
        condition: service_started
      postgres:
        condition: service_healthy
    restart: on-failure:3
    command: >
      /bin/bash -c "
        echo 'Waiting for JobManager to be ready...' &&
        until curl -s jobmanager:8081/overview > /dev/null; do
          echo 'Waiting for JobManager...' &&
          sleep 5;
        done &&
        echo 'JobManager is ready!' &&
        echo 'Checking for existing jobs...' &&
        if ! flink list -m jobmanager:8081 | grep 'aggregator'; then
          echo 'Deploying Flink job...' &&
          flink run -d -m jobmanager:8081 -c com.twilight.aggregator.job.PairMetricsJob /opt/flink/jobs/aggregator-1.0-SNAPSHOT.jar;
        else
          echo 'Job is already running';
        fi
      "
    volumes:
      - ./aggregator/target:/opt/flink/jobs

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_log:/var/lib/zookeeper/log

  kafka:
    image: confluentinc/cp-kafka:7.4.1
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    volumes:
      - kafka_data:/var/lib/kafka/data

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181

  postgres:
    image: postgres:13
    container_name: postgres
    environment:
      POSTGRES_USER: twilight
      POSTGRES_PASSWORD: twilight123
      POSTGRES_DB: twilight
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts:/scripts
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U twilight"]
      interval: 5s
      timeout: 5s
      retries: 5

  init-db:
    image: postgres:13
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_USER: twilight
      POSTGRES_PASSWORD: twilight123
      TEST_ENV: "true"
    volumes:
      - ./scripts:/scripts
    command: ["/scripts/init.sh"]

volumes:
  zookeeper_data:
  zookeeper_log:
  kafka_data:
  postgres_data: 